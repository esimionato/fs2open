cmake_minimum_required(VERSION 2.6)

PROJECT( fsopen )


SET(CMAKE_MODULE_PATH
	${CMAKE_SOURCE_DIR}/cmake
)

SET( CMAKE_MAJOR_VERSION 3 )
SET( CMAKE_MINOR_VERSION 6 )
SET( CMAKE_PATCH_VERSION 10 )

INCLUDE(DefineCompilerFlags)
INCLUDE(DefineGameOptions)
INCLUDE(DefineCPackGenerators)

#set default output path after build
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/build)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/build)

IF(WIN32)
	ADD_DEFINITIONS(-D_WIN32)
ELSE(WIN32)
	ADD_DEFINITIONS(-DSCP_UNIX)
ENDIF(WIN32)

#configure required libraries & compile
FIND_PACKAGE(SDL REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
IF(NOT NO_SOUND)
	FIND_PACKAGE(Ogg REQUIRED)
	FIND_PACKAGE(Theora REQUIRED)
	FIND_PACKAGE(Vorbis REQUIRED)
	IF(WIN32 AND NOT OGG_FOUND OR WIN32 AND NOT THEORA_FOUND OR WIN32 AND NOT VORBIS_FOUND)
		SET(OGG_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/oggvorbis/include/ogg)
		SET(OGG_LIBRARY ${CMAKE_SOURCE_DIR}/oggvorbis/lib/ogg_static.lib)
		SET(VORBIS_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/oggvorbis/include/vorbis)
		SET(VORBIS_LIBRARY ${CMAKE_SOURCE_DIR}/oggvorbis/lib/vorbis_static.lib ${CMAKE_SOURCE_DIR}/oggvorbis/lib/vorbisfile_static.lib)
		FIND_LIBRARY(MATHLIB m)
		IF(NOT MATHLIB)
			MESSAGE(FATAL_ERROR "libm not found!")
		ENDIF(NOT MATHLIB)
		SET(VORBIS_LIBRARY ${VORBIS_LIBRARY} ${MATHLIB})
		SET(THEORA_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/oggvorbis/include/theora)
		SET(THEORA_LIBRARY ${CMAKE_SOURCE_DIR}/oggvorbis/lib/theora_static.lib)
	ENDIF()
	FIND_PACKAGE(OpenAL REQUIRED)
	IF(WIN32 AND NOT OPENAL_FOUND)
		SET(OPENAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/openal/include)
		IF(HAVE64_BIT)
			IF(MSVC)
				SET(OPENAL_LIBRARY ${CMAKE_SOURCE_DIR}/openal/libs/win64/openal32.lib)
			ELSE(MSVC)
				MESSAGE( FATAL_ERROR "OpenAL not supported")
			ENDIF(MSVC)
		ELSE(HAVE64_BIT)
			SET(OPENAL_LIBRARY ${CMAKE_SOURCE_DIR}/openal/libs/win32/openal32.lib)
		ENDIF(HAVE64_BIT)
		IF(OPENAL_LIBRARY AND OPENAL_INCLUDE_DIR)
			SET(OPENAL_FOUND TRUE)
		ENDIF(OPENAL_LIBRARY AND OPENAL_INCLUDE_DIR)
	ENDIF(WIN32 AND NOT OPENAL_FOUND)
ENDIF(NOT NO_SOUND)
IF(JPEG_STATIC)
	ADD_SUBDIRECTORY(libjpeg)
ELSE(JPEG_STATIC)
	FIND_PACKAGE(JPEG REQUIRED)
	IF(NOT JPEG_FOUND)
		ADD_SUBDIRECTORY(libjpeg)
	ENDIF(NOT JPEG_FOUND)
ENDIF(JPEG_STATIC)
IF(SPEECH)
	ADD_DEFINITIONS(-DFS2_SPEECH)
	SET(SPEECH_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/speech/include)
	SET(SPEECH_LIBRARY ${CMAKE_SOURCE_DIR}/speech/lib/i386/sapi.lib)
ENDIF(SPEECH)

ADD_SUBDIRECTORY(lua)
ADD_SUBDIRECTORY(code)

MESSAGE( STATUS )
MESSAGE( STATUS "-------------------------------------------------------------------------------" )
MESSAGE( STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}" )
MESSAGE( STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}" )
MESSAGE( STATUS "Change a value with: cmake -D<Variable>=<Value>" )
MESSAGE( STATUS "-------------------------------------------------------------------------------" )
MESSAGE( STATUS )
